@model PLE444.Models.Course

<div class="panel panel-bluegray" data-widget='{"draggable": "false"}'>
    <div class="panel-heading">
        <div id="title" style="max-width:300px;" class="pull-right hidden-xs hidden-sm">
            <span>@Model.Heading</span>
        </div>
        <h2>
            <ul class="nav nav-tabs navigator">
                <li><a href="@Url.Action("Index","Chapter",new { id = Model.ID })">Bölümler</a></li>

                <li><a href="@Url.Action("Index","Assignment",new { id =  Model.ID })"> Ödevler</a></li>

                <li><a href="@Url.Action("Index","Material",new { id =  Model.ID })">Materyaller</a></li>

                <li><a href="@Url.Action("Grades","Course",new { courseId =  Model.ID })">Notlar</a></li>

                <li><a href="@Url.Action("Discussion","Course",new { id = Model.ID })">Tartışmalar</a></li>
            </ul>
        </h2>
    </div>
</div>


@Scripts.Render("~/Content/js/jquery-1.8.3.min.js")
<script src="~/Content/plugins/jQuery.dotdotdot/jquery.dotdotdot.min.js" type="text/javascript"></script>
<script>
    $(function () {
        $('.navigator a').each(function (index) {
            if ($(this).attr("href").indexOf(location.pathname) != -1)
                $(this).parent("li").addClass("active");
        });
    });

    $("#title").dotdotdot({
        /*	The text to add as ellipsis. */
        ellipsis: '... ',



        /*	Wrap-option fallback to 'letter' for long words */
        fallbackToLetter: true,

        /*	jQuery-selector for the element to keep and put after the ellipsis. */
        after: null,

        /*	Whether to update the ellipsis: true/'window' */
        watch: true,

        /*	Optionally set a max-height, can be a number or function.
			If null, the height will be measured. */
        height: 48,

        /*	Deviation for the height-option. */
        tolerance: 0,

        /*	Callback function that is fired after the ellipsis is added,
			receives two parameters: isTruncated(boolean), orgContent(string). */
        callback: function (isTruncated, orgContent) { },

        lastCharacter: {

            /*	Remove these characters from the end of the truncated text. */
            remove: [' ', ',', ';', '.', '!', '?'],

            /*	Don't add an ellipsis if this array contains 
				the last character of the truncated text. */
            noEllipsis: []
        }
    });
</script>



